{"version":3,"file":"lib.modern.mjs","sources":["../src/Markdownie.tsx","../src/parser.tsx"],"sourcesContent":["import React from \"react\";\nimport { parse, ParseOptions } from \"./parser\";\n\ninterface MarkdownProps {\n  content: string;\n  options?: ParseOptions;\n}\n\nfunction Markdown({ content, options }: MarkdownProps) {\n  const html = parse(content, options);\n\n  return <div>{html}</div>;\n}\n\nexport default Markdown;\n","import React from \"react\";\n\nexport interface ParseOptions {\n  langPrefix?: string;\n}\n\nexport function parse(markdown: string, options: ParseOptions = {}) {\n  const { langPrefix = \"language-\" } = options;\n\n  const lines = markdown.trim().split(/\\r\\n|\\n/);\n\n  const html: React.ReactNode[] = [];\n\n  let inCodeBlock = false;\n  let codeBlockLang: any = null;\n  let codeBlock: string[] = [];\n\n  lines.forEach((line, index) => {\n    // check for headers\n    if (/^#{1,6}\\s/.test(line)) {\n      const level = line.match(/^#{1,6}/)?.[0].length;\n      const text = line.replace(/^#{1,6}\\s/, \"\");\n      html.push(React.createElement(`h${level}`, { key: `h-${index}` }, text));\n    }\n\n    // check for horizontal rule\n    else if (/^(\\*{3,}|-{3,}|_{3,})$/.test(line)) {\n      html.push(<hr key={`hr-${index}`} />);\n    }\n\n    // check for unordered list\n    else if (/^(\\*|-)\\s/.test(line)) {\n      const text = line.replace(/^(\\*|-)\\s/, \"\");\n      html.push(<li key={`ul-${index}`}>{text}</li>);\n    }\n\n    // check for ordered list\n    else if (/^\\d+\\.\\s/.test(line)) {\n      const text = line.replace(/^\\d+\\.\\s/, \"\");\n      html.push(<li key={`ol-${index}`}>{text}</li>);\n    }\n\n    // check for blockquote\n    else if (/^>\\s/.test(line)) {\n      const text = line.replace(/^>\\s?/, \"\");\n      html.push(<blockquote key={`quote-${index}`}>{text}</blockquote>);\n    }\n\n    // check for code block\n    else if (/^```(\\S+)?$/.test(line)) {\n      inCodeBlock = !inCodeBlock;\n      if (inCodeBlock) {\n        codeBlockLang = line.match(/^```(\\S+)?$/)?.[1] || null;\n      } else {\n        const code = codeBlock.join(\"\\n\");\n        html.push(\n          <pre key={`cpde-${index}`}>\n            <code\n              className={\n                codeBlockLang ? `${langPrefix}${codeBlockLang}` : undefined\n              }\n            >\n              {code}\n            </code>\n          </pre>\n        );\n        codeBlock = [];\n        codeBlockLang = null;\n      }\n    } else if (inCodeBlock) {\n      codeBlock.push(line);\n    }\n\n    // check for inline code\n    else if (/`([^`]+)`/.test(line)) {\n      const text = line.replace(/`([^`]+)`/g, `<code>{$1}</code>`);\n      html.push(<p key={`inlcd-${index}`}>{text}</p>);\n    }\n\n    // check for links\n    else if (/\\[([^\\]]+)\\]\\(([^\\)]+)\\)/.test(line)) {\n      const text = line.replace(\n        /\\[([^\\]]+)\\]\\(([^\\)]+)\\)/g,\n        '<a href=\"$2\">$1</a>'\n      );\n      html.push(<p>{text}</p>);\n    }\n\n    // check for images\n    else if (/!\\[([^\\]]+)\\]\\(([^\\)]+)\\)/.test(line)) {\n      const match = line.match(/!\\[([^\\]]+)\\]\\(([^\\)]+)\\)/);\n      const alt = match?.[1];\n      const src = match?.[2];\n      html.push(<img key={`img-${index}`} src={src} alt={alt} />);\n    }\n    // check for tables\n    else if (/^\\|(.+\\|)+/.test(line)) {\n      const tableRows = [line];\n      while (lines.length && /^\\|(.+\\|)+/.test(lines[0])) {\n        tableRows.push(lines.shift()!);\n      }\n\n      const headerRow = tableRows.shift();\n      const headerColumns = headerRow!\n        .substring(1, headerRow!.length - 1)\n        .split(\"|\")\n        .map((column) => column.trim());\n\n      const tableHead = (\n        <thead>\n          <tr>\n            {headerColumns.map((column) => (\n              <th key={column}>{column}</th>\n            ))}\n          </tr>\n        </thead>\n      );\n\n      const tableBody = (\n        <tbody>\n          {tableRows.map((row, rowIndex) => (\n            <tr key={rowIndex}>\n              {row\n                .substring(1, row.length - 1)\n                .split(\"|\")\n                .map((cell, cellIndex) => (\n                  <td key={cellIndex}>{cell.trim()}</td>\n                ))}\n            </tr>\n          ))}\n        </tbody>\n      );\n\n      html.push(\n        <table>\n          {tableHead}\n          {tableBody}\n        </table>\n      );\n    } else if (!inCodeBlock && /(.*\\*{1,2}.*|\\*{1,2}.*\\*{1,2})/.test(line)) {\n      const text = line\n        .replace(/\\*\\*([^*]+)\\*\\*/g, \"<strong>$1</strong>\")\n        .replace(/\\*([^*]+)\\*/g, \"<em>$1</em>\");\n      html.push(<p key={index} dangerouslySetInnerHTML={{ __html: text }} />);\n    }\n    // check for charts (Assuming chartData is a JSON string)\n\n    // regular paragraph\n    else if (!inCodeBlock) {\n      html.push(<p key={index}>{line}</p>);\n    }\n  });\n\n  return html;\n}\n"],"names":["Markdown","content","options","html","markdown","langPrefix","lines","trim","split","inCodeBlock","codeBlockLang","codeBlock","forEach","line","index","test","_line$match","level","match","length","text","replace","push","React","createElement","key","_line$match2","code","join","className","undefined","src","alt","tableRows","shift","headerRow","headerColumns","substring","map","column","tableHead","tableBody","row","rowIndex","cell","cellIndex","dangerouslySetInnerHTML","__html","parse"],"mappings":"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"}